// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Showcase.Domain.Enums;
using Showcase.Persistence;

namespace Showcase.Persistence.Migrations
{
    [DbContext(typeof(ShowcaseDbContext))]
    [Migration("20200827175634_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:Enum:e_activity_type", "add_dev_prog_lang,remove_dev_prog_lang,add_proj_prog_lang,remove_proj_prog_lang,watch_developer,unwatch_developer,watch_project,unwatch_project,add_blog_post,edit_blog_post,publish_blog_post,archive_blog_post,add_twitter_testimonial,remove_twitter_testimonial,add_facebook_testimonial,remove_facebook_testimonial,display_twitter_testimonial,undisplay_twitter_testimonial,display_facebook_testimonial,undisplay_facebook_testimonial")
                .HasAnnotation("Npgsql:Enum:e_tag_type", "meta,programming_language")
                .HasAnnotation("Npgsql:Enum:ep_rogramming_language", "c_sharp,java,java_script,go")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Showcase.Domain.Entities.ActivityNote", b =>
                {
                    b.Property<string>("ActivityNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("activity_note_id")
                        .HasColumnType("text");

                    b.Property<EActivityType>("ActivityType")
                        .HasColumnName("activity_type")
                        .HasColumnType("e_activity_type");

                    b.Property<string>("BlogPostId")
                        .HasColumnName("blog_post_id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("NoteText")
                        .HasColumnName("note_text")
                        .HasColumnType("text");

                    b.Property<string>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("text");

                    b.Property<string>("ShowcaseProfileId")
                        .HasColumnName("showcase_profile_id")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("ActivityNoteId");

                    b.HasIndex("BlogPostId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ShowcaseProfileId");

                    b.ToTable("activity_notes");
                });

            modelBuilder.Entity("Showcase.Domain.Entities.BlogPost", b =>
                {
                    b.Property<string>("BlogPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("blog_post_id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnName("last_modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnName("last_modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PostContentMdFileId")
                        .HasColumnName("post_content_md_file_id")
                        .HasColumnType("text");

                    b.Property<string>("PostContentString")
                        .HasColumnName("post_content_string")
                        .HasColumnType("text");

                    b.Property<string>("PostThumbnailFileId")
                        .HasColumnName("post_thumbnail_file_id")
                        .HasColumnType("text");

                    b.Property<string>("Summary")
                        .HasColumnName("summary")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("BlogPostId");

                    b.HasIndex("PostContentMdFileId");

                    b.HasIndex("PostThumbnailFileId");

                    b.ToTable("blog_posts");
                });

            modelBuilder.Entity("Showcase.Domain.Entities.BlogPostTag", b =>
                {
                    b.Property<string>("BlogPostId")
                        .HasColumnName("blog_post_id")
                        .HasColumnType("text");

                    b.Property<string>("TagId")
                        .HasColumnName("tag_id")
                        .HasColumnType("text");

                    b.HasKey("BlogPostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("blog_post_tags");
                });

            modelBuilder.Entity("Showcase.Domain.Entities.BlogPostWatcher", b =>
                {
                    b.Property<string>("BlogPostId")
                        .HasColumnName("blog_post_id")
                        .HasColumnType("text");

                    b.Property<string>("WatcherId")
                        .HasColumnName("watcher_id")
                        .HasColumnType("text");

                    b.Property<bool>("Cancelled")
                        .HasColumnName("cancelled")
                        .HasColumnType("boolean");

                    b.HasKey("BlogPostId", "WatcherId");

                    b.HasIndex("WatcherId");

                    b.ToTable("blog_post_watchers");
                });

            modelBuilder.Entity("Showcase.Domain.Entities.BucketFile", b =>
                {
                    b.Property<string>("BucketFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bucket_file_id")
                        .HasColumnType("text");

                    b.Property<bool>("Archived")
                        .HasColumnName("archived")
                        .HasColumnType("boolean");

                    b.Property<string>("BucketName")
                        .HasColumnName("bucket_name")
                        .HasColumnType("text");

                    b.Property<string>("CacheControlMetadata")
                        .HasColumnName("cache_control_metadata")
                        .HasColumnType("text");

                    b.Property<string>("ContentEncodingMetadata")
                        .HasColumnName("content_encoding_metadata")
                        .HasColumnType("text");

                    b.Property<string>("ContentLanguageMetadata")
                        .HasColumnName("content_language_metadata")
                        .HasColumnType("text");

                    b.Property<string>("ContentTypeMetadata")
                        .HasColumnName("content_type_metadata")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FilePath")
                        .HasColumnName("file_path")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnName("last_modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnName("last_modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OriginalFileName")
                        .HasColumnName("original_file_name")
                        .HasColumnType("text");

                    b.Property<int>("SizeInBytes")
                        .HasColumnName("size_in_bytes")
                        .HasColumnType("integer");

                    b.Property<string>("UiDescription")
                        .HasColumnName("ui_description")
                        .HasColumnType("text");

                    b.Property<string>("UiTitle")
                        .HasColumnName("ui_title")
                        .HasColumnType("text");

                    b.Property<bool>("Uploaded")
                        .HasColumnName("uploaded")
                        .HasColumnType("boolean");

                    b.HasKey("BucketFileId");

                    b.ToTable("bucket_files");
                });

            modelBuilder.Entity("Showcase.Domain.Entities.DisplayProject", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnName("last_modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnName("last_modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("SourceCodeUrl")
                        .HasColumnName("source_code_url")
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnName("thumbnail_url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("display_projects");
                });

            modelBuilder.Entity("Showcase.Domain.Entities.ProfileTag", b =>
                {
                    b.Property<string>("ShowcaseProfileId")
                        .HasColumnName("showcase_profile_id")
                        .HasColumnType("text");

                    b.Property<string>("TagId")
                        .HasColumnName("tag_id")
                        .HasColumnType("text");

                    b.HasKey("ShowcaseProfileId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("profile_tags");
                });

            modelBuilder.Entity("Showcase.Domain.Entities.ProfileWatcher", b =>
                {
                    b.Property<string>("WatcherId")
                        .HasColumnName("watcher_id")
                        .HasColumnType("text");

                    b.Property<string>("WatcheeId")
                        .HasColumnName("watchee_id")
                        .HasColumnType("text");

                    b.Property<bool>("Cancelled")
                        .HasColumnName("cancelled")
                        .HasColumnType("boolean");

                    b.HasKey("WatcherId", "WatcheeId");

                    b.HasIndex("WatcheeId");

                    b.ToTable("profile_watchers");
                });

            modelBuilder.Entity("Showcase.Domain.Entities.ProjectTag", b =>
                {
                    b.Property<string>("DisplayProjectId")
                        .HasColumnName("display_project_id")
                        .HasColumnType("text");

                    b.Property<string>("TagId")
                        .HasColumnName("tag_id")
                        .HasColumnType("text");

                    b.HasKey("DisplayProjectId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("project_tags");
                });

            modelBuilder.Entity("Showcase.Domain.Entities.ProjectWatcher", b =>
                {
                    b.Property<string>("DisplayProjectId")
                        .HasColumnName("display_project_id")
                        .HasColumnType("text");

                    b.Property<string>("WatcherId")
                        .HasColumnName("watcher_id")
                        .HasColumnType("text");

                    b.Property<bool>("Cancelled")
                        .HasColumnName("cancelled")
                        .HasColumnType("boolean");

                    b.HasKey("DisplayProjectId", "WatcherId");

                    b.HasIndex("WatcherId");

                    b.ToTable("project_watchers");
                });

            modelBuilder.Entity("Showcase.Domain.Entities.ShowcaseProfile", b =>
                {
                    b.Property<string>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("profile_id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnName("last_modified_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnName("last_modified_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("text");

                    b.HasKey("ProfileId");

                    b.ToTable("profiles");
                });

            modelBuilder.Entity("Showcase.Domain.Entities.Tag", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<EPRogrammingLanguage>("ProgrammingLanguageTag")
                        .HasColumnName("programming_language_tag")
                        .HasColumnType("ep_rogramming_language");

                    b.Property<ETagType>("Type")
                        .HasColumnName("type")
                        .HasColumnType("e_tag_type");

                    b.HasKey("Id");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("Showcase.Domain.Entities.ActivityNote", b =>
                {
                    b.HasOne("Showcase.Domain.Entities.BlogPost", "BlogPost")
                        .WithMany("Notes")
                        .HasForeignKey("BlogPostId");

                    b.HasOne("Showcase.Domain.Entities.DisplayProject", "Project")
                        .WithMany("Notes")
                        .HasForeignKey("ProjectId");

                    b.HasOne("Showcase.Domain.Entities.ShowcaseProfile", "ShowcaseProfile")
                        .WithMany("Notes")
                        .HasForeignKey("ShowcaseProfileId");
                });

            modelBuilder.Entity("Showcase.Domain.Entities.BlogPost", b =>
                {
                    b.HasOne("Showcase.Domain.Entities.BucketFile", "PostContentMdFile")
                        .WithMany()
                        .HasForeignKey("PostContentMdFileId");

                    b.HasOne("Showcase.Domain.Entities.BucketFile", "PostThumbnailFile")
                        .WithMany()
                        .HasForeignKey("PostThumbnailFileId");
                });

            modelBuilder.Entity("Showcase.Domain.Entities.BlogPostTag", b =>
                {
                    b.HasOne("Showcase.Domain.Entities.BlogPost", "BlogPost")
                        .WithMany("Tags")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Showcase.Domain.Entities.Tag", "Tag")
                        .WithMany("BlogPostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Showcase.Domain.Entities.BlogPostWatcher", b =>
                {
                    b.HasOne("Showcase.Domain.Entities.BlogPost", "BlogPost")
                        .WithMany("Watchers")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Showcase.Domain.Entities.ShowcaseProfile", "Watcher")
                        .WithMany("WatchingBlogPosts")
                        .HasForeignKey("WatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Showcase.Domain.Entities.ProfileTag", b =>
                {
                    b.HasOne("Showcase.Domain.Entities.ShowcaseProfile", "ShowcaseProfile")
                        .WithMany("Tags")
                        .HasForeignKey("ShowcaseProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Showcase.Domain.Entities.Tag", "Tag")
                        .WithMany("ProfileTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Showcase.Domain.Entities.ProfileWatcher", b =>
                {
                    b.HasOne("Showcase.Domain.Entities.ShowcaseProfile", "Watchee")
                        .WithMany("WatchingProfiles")
                        .HasForeignKey("WatcheeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Showcase.Domain.Entities.ShowcaseProfile", "Watcher")
                        .WithMany("Watchers")
                        .HasForeignKey("WatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Showcase.Domain.Entities.ProjectTag", b =>
                {
                    b.HasOne("Showcase.Domain.Entities.DisplayProject", "DisplayProject")
                        .WithMany("Tags")
                        .HasForeignKey("DisplayProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Showcase.Domain.Entities.Tag", "Tag")
                        .WithMany("ProjectTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Showcase.Domain.Entities.ProjectWatcher", b =>
                {
                    b.HasOne("Showcase.Domain.Entities.DisplayProject", "DisplayProject")
                        .WithMany("Watchers")
                        .HasForeignKey("DisplayProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Showcase.Domain.Entities.ShowcaseProfile", "Watcher")
                        .WithMany("WatchingProjects")
                        .HasForeignKey("WatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
